name: Build and Push PR Preview Image

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, closed]

jobs:
  remove-ok-to-test:
    if: github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Remove "ok-to-test" label on PR update
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const label = 'ok-to-test';
            try {
              await github.rest.issues.removeLabel({
                ...context.repo,
                issue_number: prNumber,
                name: label
              });
              console.log(`✅ Removed '${label}' label from PR #${prNumber}`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`ℹ️ Label '${label}' not found on PR #${prNumber}`);
              } else {
                throw error;
              }
            }

  build:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Check for "ok-to-test" label
        id: check-label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const hasLabel = labels.some(l => l.name === 'ok-to-test');
            core.setOutput('hasLabel', hasLabel);
            console.log(`ok-to-test label present: ${hasLabel}`);

      # ✅ all subsequent steps only run if ok-to-test label is present
      - name: Checkout code
        if: steps.check-label.outputs.hasLabel == 'true'
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: steps.check-label.outputs.hasLabel == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Oracle Cloud Container Registry
        if: steps.check-label.outputs.hasLabel == 'true'
        uses: docker/login-action@v3
        with:
          registry: iad.ocir.io
          username: ${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Build and push PR preview image
        if: steps.check-label.outputs.hasLabel == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: iad.ocir.io/id4wyucbsggm/kubestellar-docs-prs:pr-${{ github.event.number }}
          provenance: false

      - name: Comment PR with image info
        if: steps.check-label.outputs.hasLabel == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.number }}
          body: |
            🧩 **Preview image built and pushed to OCIR**
            ```
            iad.ocir.io/id4wyucbsggm/kubestellar-docs-prs:pr-${{ github.event.number }}
            ```
            🌐 **Live Preview (will be available after rollout):**
            [https://pr-${{ github.event.number }}.previews.kubestellar.io](https://pr-${{ github.event.number }}.previews.kubestellar.io)

  cleanup:
    # ✅ Run cleanup when PR is closed (merged or not)
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest

    steps:
      - name: Install OCI CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-pip
          pip install oci-cli

      - name: Configure OCI CLI
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        run: |
          mkdir -p ~/.oci
          echo "$OCI_CLI_KEY_CONTENT" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat <<EOF > ~/.oci/config
          [DEFAULT]
          user=${OCI_CLI_USER}
          fingerprint=${OCI_CLI_FINGERPRINT}
          key_file=~/.oci/oci_api_key.pem
          tenancy=${OCI_CLI_TENANCY}
          region=${OCI_CLI_REGION}
          EOF

      - name: Delete PR image from OCIR
        run: |
          echo "Searching for image: pr-${{ github.event.number }}"

          IMAGE_IDS=$(oci artifacts container image list \
            --repository-name "kubestellar-docs-prs" \
            --compartment-id "${{ secrets.OCI_CLI_TENANCY }}" \
            --query 'data[?contains(`"display-name"`, `pr-${{ github.event.number }}`)].id' \
            --raw-output)

          if [ -z "$IMAGE_IDS" ]; then
            echo "No image found for PR #${{ github.event.number }}"
          else
            for IMAGE_ID in $IMAGE_IDS; do
              echo "Deleting image: $IMAGE_ID"
              oci artifacts container image delete --image-id "$IMAGE_ID" --force
            done
          fi

      - name: Comment PR cleanup
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.number }}
          body: |
            🧹 **Deleted preview image from OCIR**
            ```
            iad.ocir.io/id4wyucbsggm/kubestellar-docs-prs:pr-${{ github.event.number }}
            ```
            📴 **Preview URL Removed**
            https://pr-${{ github.event.number }}.previews.kubestellar.io
