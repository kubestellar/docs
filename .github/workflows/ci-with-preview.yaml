name: CI/CD & PR Preview Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, reopened, synchronize, closed, labeled]
  pull_request_target:
    types: [labeled]
  workflow_dispatch:

env:
  NODE_VERSION: "20"

jobs:
  # ============================================================
  # 🕒 Wait for Labeler to finish before starting CI
  # ============================================================
  wait-for-labeler:
    name: Wait for Labeler completion
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
      - name: Wait for any running Labeler workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "⏳ Checking if 'Labeler' workflow is still running..."
          for i in {1..30}; do
            running=$(gh run list \
              --repo "${GITHUB_REPOSITORY}" \
              --workflow "Labeler" \
              --branch "${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}" \
              --json status \
              --jq '.[] | select(.status=="in_progress")' || true)
            if [ -n "$running" ]; then
              echo "Labeler is still running, waiting 10s..."
              sleep 10
            else
              echo "✅ Labeler finished."
              break
            fi
          done
          echo "🕓 Letting GitHub settle for 10 seconds..."
          sleep 5

  # ============================================================
  # 🤖 Auto-apply "ok-to-test" for kubestellar org team members
  # ============================================================
  auto-ok-to-test:
    name: Auto-label kubestellar org team members
    if: github.event_name == 'pull_request' && contains(fromJson('["opened","reopened","synchronize"]'), github.event.action)
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Add ok-to-test for trusted kubestellar team members
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_TOKEN }}
          script: |
            const org = 'kubestellar';
            const teams = ['kubestellar-contributors', 'kubestellar-docs'];
            const label = 'ok-to-test';
            const prAuthor = context.payload.pull_request.user.login;
            const prNumber = context.payload.pull_request.number;

            async function isTeamMember(org, team, user) {
              try {
                await github.rest.teams.getMembershipForUserInOrg({
                  org,
                  team_slug: team,
                  username: user
                });
                console.log(`✅ ${user} is a member of @${org}/${team}`);
                return true;
              } catch (error) {
                if (error.status === 404) {
                  console.log(`ℹ️ ${user} is NOT a member of @${org}/${team}`);
                  return false;
                }
                throw error;
              }
            }

            for (const team of teams) {
              if (await isTeamMember(org, team, prAuthor)) {
                const gh = new github.constructor({
                  auth: process.env.GITHUB_TOKEN
                });
                await gh.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  labels: [label]
                });
                console.log(`🏷️ Added '${label}' for ${prAuthor}`);
                return;
              }
            }

            console.log(`🚫 ${prAuthor} not found in any trusted teams, skipping auto-label.`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================
  # 🔹 CI job (builds .next and uploads artifacts)
  # ============================================================
  ci:
    name: Code Quality & Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: write
      issues: write
    needs: [wait-for-labeler, auto-ok-to-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting (Prettier)
        run: npm run format:check

      - name: TypeScript type check
        run: npm run type-check

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          if [ -d ".next" ]; then
            echo "✅ Build successful - .next directory created"
            du -sh .next/
            [ -f ".next/build-manifest.json" ] && echo "✅ Build manifest exists"
          else
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi

      - name: Run tests (if available)
        run: npm test

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.event.pull_request.head.sha }}
          path: |
            .next/
            public/
            package.json
            next.config.ts
          retention-days: 7

      - name: Upload CI reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports-${{ github.sha }}
          path: |
            npm-debug.log*
            yarn-debug.log*
            yarn-error.log*
          retention-days: 3
          if-no-files-found: ignore

  # ============================================================
  # 🧪 Debug event info (temporary)
  # ============================================================
  debug-event:
    name: Debug Event Payload
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub event info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Label name: ${{ github.event.label.name }}"
          echo "All labels: ${{ toJson(github.event.pull_request.labels.*.name) }}"

  # ============================================================
  # 🔹 Preview image job (triggered when label added)
  # ============================================================
  build-preview:
    name: Build & Push PR Preview Image
    runs-on: ubuntu-latest
    needs: [ci]
    if: >
      (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') &&
      (github.event.action == 'labeled' || contains(github.event.pull_request.labels.*.name, 'ok-to-test'))
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/head

      - name: Download last successful build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.event.pull_request.head.sha }}
          path: .

      - name: Validate artifact presence
        run: |
          if [ ! -d ".next" ]; then
            echo "⚠️ No build artifacts found for this commit. Push a new commit to trigger CI first."
          else
            echo "✅ Using cached build artifact (.next/) for Docker image"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Oracle Cloud Container Registry
        uses: docker/login-action@v3
        with:
          registry: iad.ocir.io
          username: ${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Build and push PR preview image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: iad.ocir.io/id4wyucbsggm/kubestellar-docs-prs:pr-${{ github.event.pull_request.number }}
          provenance: false

      - name: Comment PR with image info
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            🧩 **Preview image built and pushed to OCIR**
            ```
            iad.ocir.io/id4wyucbsggm/kubestellar-docs-prs:pr-${{ github.event.pull_request.number }}
            ```
            🌐 **Live Preview (after rollout):**
            [http://pr-${{ github.event.pull_request.number }}.previews.kubestellar.io](http://pr-${{ github.event.pull_request.number }}.previews.kubestellar.io)

  # ============================================================
  # 🧹 Cleanup when PR closes
  # ============================================================
  cleanup:
    name: Cleanup PR Preview Image
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Install OCI CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-pip
          pip install oci-cli

      - name: Configure OCI CLI
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        run: |
          mkdir -p ~/.oci
          echo "$OCI_CLI_KEY_CONTENT" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat <<EOF > ~/.oci/config
          [DEFAULT]
          user=${OCI_CLI_USER}
          fingerprint=${OCI_CLI_FINGERPRINT}
          key_file=~/.oci/oci_api_key.pem
          tenancy=${OCI_CLI_TENANCY}
          region=${OCI_CLI_REGION}
          EOF

      - name: Delete PR image from OCIR
        run: |
          echo "Searching for image: pr-${{ github.event.number }}"

          IMAGE_IDS=$(oci artifacts container image list \
            --repository-name "kubestellar-docs-prs" \
            --compartment-id "${{ secrets.OCI_CLI_TENANCY }}" \
            --query 'data[?contains(`"display-name"`, `pr-${{ github.event.number }}`)].id' \
            --raw-output)

          if [ -z "$IMAGE_IDS" ]; then
            echo "No image found for PR #${{ github.event.number }}"
          else
            for IMAGE_ID in $IMAGE_IDS; do
              echo "Deleting image: $IMAGE_ID"
              oci artifacts container image delete --image-id "$IMAGE_ID" --force
            done
          fi

      - name: Comment PR cleanup
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.number }}
          body: |
            🧹 **Deleted preview image from OCIR**
            ```
            iad.ocir.io/id4wyucbsggm/kubestellar-docs-prs:pr-${{ github.event.number }}
            ```
            📴 **Preview URL Removed**
            http://pr-${{ github.event.number }}.previews.kubestellar.io
